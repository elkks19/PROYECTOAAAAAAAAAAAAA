import { MessagesProviderContact, ErrorReporterContract, FieldContext } from '@vinejs/compiler/types';
import { a as Validation } from '../types-8973fb04.js';
import { S as SimpleErrorReporter } from '../simple_error_reporter-8927be32.js';
import 'normalize-url';
import 'validator/lib/isURL.js';
import 'validator/lib/isEmail.js';
import 'validator/lib/normalizeEmail.js';
import 'validator/lib/isMobilePhone.js';
import 'validator/lib/isPostalCode.js';
import 'validator';
import 'validator/lib/isIBAN.js';

/**
 * Exposes API to create a dummy field context
 */
declare class FieldFactory {
    create(fieldName: string, value: any, messagesProvider?: MessagesProviderContact, errorReporter?: ErrorReporterContract): {
        value: any;
        isArrayMember: false;
        parent: any;
        data: {
            [x: string]: any;
        };
        name: any;
        wildCardPath: string;
        isDefined: boolean;
        isValid: true;
        meta: {};
        mutate(newValue: any): FieldContext;
        report(message: string, rule: string, context: FieldContext, args: Record<string, any> | undefined): void;
    };
}

/**
 * Exposes APIs for writing validation assertions
 */
declare class ValidationResult {
    #private;
    constructor(outputValue: any, reporter: SimpleErrorReporter);
    /**
     * Returns the validation result output
     */
    getOutput(): any;
    /**
     * Returns an array of errors reported to the
     * error reporter
     */
    getErrors(): {
        message: string;
        field: string;
        rule: string;
        index?: number | undefined;
        meta?: Record<string, any> | undefined;
    }[];
    /**
     * Assert one or more validation errors have occurred
     */
    assertSucceeded(): void;
    /**
     * Assert the output value of validation. The output value is
     * same as the input value, unless "mutate" method is called
     */
    assertOutput(expectedOutput: any): void;
    /**
     * Assert one or more validation errors have occurred
     */
    assertFailed(): void;
    /**
     * Assert the number of errors have occurred
     */
    assertErrorsCount(count: number): void;
    /**
     * Assert error messages to include a given error message
     */
    assertError(message: string): void;
}
/**
 * Validator factory exposes the API to execute validations
 * during tests
 */
declare class ValidatorFactory {
    #private;
    constructor(field?: Partial<FieldContext>, bail?: boolean);
    /**
     * Define field context for the validation
     */
    withContext(field: Partial<FieldContext>): ValidatorFactory;
    /**
     * Toggle bail mode for the validation
     */
    bail(state: boolean): ValidatorFactory;
    /**
     * Executes a validation against the provided value
     */
    execute(validation: Validation<any> | Validation<any>[], value: any): ValidationResult;
    /**
     * Executes an async validation against the provided
     * value
     */
    executeAsync(validation: Validation<any> | Validation<any>[], value: any): Promise<ValidationResult>;
}

/**
 * Validator factory is used for unit testing validation
 * rules.
 */
declare const validator: ValidatorFactory;
declare const fieldContext: FieldFactory;

export { fieldContext, validator };
