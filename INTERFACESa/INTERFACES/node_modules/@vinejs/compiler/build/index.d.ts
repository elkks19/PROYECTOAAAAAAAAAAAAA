import { RootNode, CompilerOptions, CompilerNodes, CompilerParent, CompilerField, Refs, MessagesProviderContact, ErrorReporterContract, RefsStore } from './src/types.js';

/**
 * Compiler buffer to collect JS fragments in memory
 */
declare class CompilerBuffer {
    #private;
    /**
     * The character used to create a new line
     */
    newLine: string;
    /**
     * Write statement ot the output
     */
    writeStatement(statement: string): void;
    /**
     * Creates a child buffer
     */
    child(): CompilerBuffer;
    /**
     * Returns the buffer contents as string
     */
    toString(): string;
    /**
     * Flush in-memory string
     */
    flush(): void;
}

/**
 * Compiler is used to compile an array of schema nodes into a re-usable
 * JavaScript.
 */
declare class Compiler {
    #private;
    /**
     * Variables counter is used to generate unique variable
     * names with a counter suffix.
     */
    variablesCounter: number;
    constructor(rootNode: RootNode, options?: CompilerOptions);
    /**
     * Converts a node to a field. Optionally accepts a parent node to create
     * a field for a specific parent type.
     */
    createFieldFor(node: CompilerNodes, parent: CompilerParent): CompilerField;
    /**
     * Compiles a given compiler node
     */
    compileNode(node: CompilerNodes, buffer: CompilerBuffer, parent: CompilerParent, parentField?: CompilerField): void;
    /**
     * Compile schema nodes to an async function
     */
    compile(): (data: any, meta: Record<string, any>, refs: Refs, messagesProvider: MessagesProviderContact, errorReporter: ErrorReporterContract) => Promise<Record<string, any>>;
}

/**
 * Creates a refs store for parsing the schema
 */
declare function refsBuilder(): RefsStore;

export { Compiler, refsBuilder };
